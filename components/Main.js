import React, { Component } from 'react';
import { View, Text,Dimensions,Platform } from 'react-native';

var PushNotification = require("react-native-push-notification");
import Home from './Home';
import Schedule from './Schedule';
import Profile from './Profile';
import Add from './Add';
import Welcome from './Welcome';
import Tabbar from './tabbar';

const {height,width} = Dimensions.get('window');

export default class Main extends Component {
  constructor(props) {
    super(props);
    this.state = {
        currentScreen:''
    };
  }

  componentDidMount = () => {
    const date = new Date();
    const time = date.getHours();
 console.log('start',time);
 const that = this;
PushNotification.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function(token) {
    console.log("TOKEN:", token);
  },
 
  // (required) Called when a remote or local notification is opened or received
  onNotification: function(notification) {
    console.log("NOTIFICATION:", notification);
    that.setState({currentScreen:'blueTab'})
    // process the notification
 
    // required on iOS only (see fetchCompletionHandler docs: https://github.com/react-native-community/react-native-push-notification-ios)
    // notification.finish(PushNotificationIOS.FetchResult.NoData);
  },
 
  // ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)
  senderID: "YOUR GCM (OR FCM) SENDER ID",
 
  // IOS ONLY (optional): default: all - Permissions to register.
  permissions: {
    alert: true,
    badge: true,
    sound: true
  },
 
  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: true,
 
  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   */
  requestPermissions: true
});
    // PushNotification.localNotificationSchedule({
    //   //... You can use all the options from localNotifications
    //   color: "blue",
    //   vibration: 800,
    // playSound: true,
    // soundName: 'my_sound.mp3',
    //   repeatType:"day",
    //   message: "My Notification Message", // (required)
    //   date: new Date(Date.now())// in 60 secs  09-11-2019 08:00  current-date
    // });

    
      // this.lastId++;
      // PushNotification.localNotificationSchedule({
      //   /* Android Only Properties */
      //   id: '12333', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      //   ticker: "My Notification Ticker", // (optional)
      //   autoCancel: true, // (optional) default: true
      //   largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      //   smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      //   bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      //   subText: "This is a subText", // (optional) default: none
      //   color: "blue", // (optional) default: system default
      //   vibrate: true, // (optional) default: true
      //   vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      //   tag: 'some_tag', // (optional) add tag to message
      //   group: "group", // (optional) add group to message
      //   ongoing: false, // (optional) set whether this is an "ongoing" notification
  
      //   /* iOS only properties */
      //   alertAction: 'view', // (optional) default: view
      //   category: null, // (optional) default: null
      //   userInfo: null, // (optional) default: null (object containing additional notification data)
  
      //   /* iOS and Android properties */
      //   title: "Local Notification", // (optional)
      //   message: "My Notification Message", // (required)
      //   playSound: false, // (optional) default: true
      //   soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      //   number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      //   actions: '["Yes", "No"]',
      //   date: new Date(Date.now() + 10 * 1000)   // (Android only) See the doc for notification actions to know more
      
      // });
      console.log(new Date(Date.now() + 10 * 1000));
  }

  gotohome = () => {
    this.setState({currentScreen:'blueTab'}) 
  }


  setCurrentTab = (currenttab) => {
      console.log('hjkghjghjg',currenttab);
      this.setState({currentScreen:currenttab})
  }
  render() {
      const { currentScreen } = this.state;
    return (
      <View style={{width,height}}>
           <View style={{height:height}}>
               {currentScreen === '' && <Welcome gotohome={this.gotohome}/>}
{ (currentScreen === 'blueTab') && <Home navigation={this.props.navigation}/> }
{ currentScreen === 'redTab' && <Schedule/> }
{ currentScreen === 'greenTab' && <Add/> }
{ currentScreen === 'yellowTab' && <Profile/> }
           </View>
           {/* <View style={{height:55}}>
<Tabbar navigation={this.props.navigation} currentTab={(currenttab) => this.setCurrentTab(currenttab)}/>
</View> */}
       
      </View>
    );
  }
}
